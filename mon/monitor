#!/usr/bin/env bash
set -eu
set -o pipefail

# exit code
EXIT_CODE_OK=0

# env file
NODE_ENV_FILE="/opt/app/bin/envs/node.env"
# hack for an undefined variable
SERVICES=
source $NODE_ENV_FILE
PORT=9200

NODE_CONF_FILE="/opt/app/conf/opensearch/opensearch.yml"

main() {
    if [ $# -lt 1 ] || [ -z "$1" ]; then
        echo "{}"
        return $EXIT_CODE_OK
    fi
    if [ ! "$1" = "cluster" ] && [ ! "$1" = "node" ]; then
        echo "{}"
        return $EXIT_CODE_OK
    fi
    case "$1" in
    "cluster")
        getClusterMetrics
        ;;
    "node")
        getNodeMetrics
        ;;
    *)
        echo "{}"
        ;;
    esac
}

# $1: health string
# green: 0, yellow: 1, red: 2
convertHealth() {
    case "$1" in
    "green")
        echo -n "0"
        ;;
    "yellow")
        echo -n "1"
        ;;
    "red")
        echo -n "2"
        ;;
    *)
        ;;
    esac
}

getNodesCnt() {
    local tmpstr1=($STABLE_DATA_NODES)
    local tmpstr2=($STABLE_MASTER_NODES)
    tmpstr1=${#tmpstr1[@]}
    tmpstr2=${#tmpstr2[@]}
    echo $((tmpstr1+tmpstr2))
}

getClusterMetrics() {
    local nodeCnt=$(getNodesCnt)
    local rawinfo=$(curl -m 10 -s -u "$MY_ADMIN_USER":"$MY_ADMIN_PASSWORD" "${MY_IP}:${PORT}/_cluster/health")
    local res=$(echo "$rawinfo" | jq --arg ncnt $nodeCnt -c '{
        "cluster_health": (if .status == "green" then 0 elif .status == "yellow" then 1 else 2 end),
        "nodes_avail_percent": (.number_of_nodes / ($ncnt | tonumber) * 100),
        "relocating_shards": .relocating_shards,
        "initializing_shards": .initializing_shards,
        "unassigned_shards": .unassigned_shards
    }')
    echo "$res"
}

# default sample rate: 30s
# if change interval, please change the sample rate
getNodeMetrics() {
    local nodename=$(echo -n $(cat $NODE_CONF_FILE | sed '/^'node.name':/!d;s/^'node.name'://'))
    local rawinfo=$(curl -m 10 -s -u "$MY_ADMIN_USER":"$MY_ADMIN_PASSWORD" "${MY_IP}:${PORT}/_nodes/$nodename/stats")
    rawinfo=$(echo $rawinfo | jq '.nodes | to_entries[] | .value')
    local res=$(echo "$rawinfo" | jq -c '{
        "indices_indexing_index_ops": (.indices.indexing.index_total / 30),
        "indices_search_query_ops": (.indices.search.query_total / 30),
        "jvm_mem_heap_used_percent": .jvm.mem.heap_used_percent,
        "fs_total_avail_percent": (.fs.total.available_in_bytes / .fs.total.total_in_bytes * 100),
        "os_cpu_load_average_1m": .os.cpu.load_average."1m",
        "os_cpu_load_average_5m": .os.cpu.load_average."5m",
        "os_cpu_load_average_15m": .os.cpu.load_average."15m"
    }')
    echo "$res"
}

main $@